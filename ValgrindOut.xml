<?xml version="1.0"?>

<valgrindoutput>

<protocolversion>4</protocolversion>
<protocoltool>memcheck</protocoltool>

<preamble>
  <line>Memcheck, a memory error detector</line>
  <line>Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.</line>
  <line>Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info</line>
  <line>Command: testGame</line>
</preamble>

<pid>27514</pid>
<ppid>27443</ppid>
<tool>memcheck</tool>

<args>
  <vargv>
    <exe>/usr/bin/valgrind</exe>
    <arg>--tool=memcheck</arg>
    <arg>--leak-check=yes</arg>
    <arg>--xml=yes</arg>
    <arg>--xml-file=ValgrindOut.xml</arg>
  </vargv>
  <argv>
    <exe>testGame</exe>
  </argv>
</args>

<status>
  <state>RUNNING</state>
  <time>00:00:00:00.065 </time>
</status>

<error>
  <unique>0x0</unique>
  <tid>1</tid>
  <kind>UninitCondition</kind>
  <what>Conditional jump or move depends on uninitialised value(s)</what>
  <stack>
    <frame>
      <ip>0x48EB42</ip>
      <obj>/home/adad3720/asn1/testGame</obj>
      <fn>GoFishController::initPlayers()</fn>
      <dir>/home/adad3720/asn1/src</dir>
      <file>GoFishController.cpp</file>
      <line>57</line>
    </frame>
    <frame>
      <ip>0x48FBE8</ip>
      <obj>/home/adad3720/asn1/testGame</obj>
      <fn>GoFishController::update()</fn>
      <dir>/home/adad3720/asn1/src</dir>
      <file>GoFishController.cpp</file>
      <line>146</line>
    </frame>
    <frame>
      <ip>0x41A892</ip>
      <obj>/home/adad3720/asn1/testGame</obj>
      <fn>GoFishControllerTest_updateStart_Test::TestBody()</fn>
      <dir>/home/adad3720/asn1/test</dir>
      <file>GoFishControllerTest.cpp</file>
      <line>197</line>
    </frame>
    <frame>
      <ip>0x4E657A2</ip>
      <obj>/usr/lib64/libgtest.so.0.0.0</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x4E5BB26</ip>
      <obj>/usr/lib64/libgtest.so.0.0.0</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x4E5BBCD</ip>
      <obj>/usr/lib64/libgtest.so.0.0.0</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x4E5BCD4</ip>
      <obj>/usr/lib64/libgtest.so.0.0.0</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x4E5F017</ip>
      <obj>/usr/lib64/libgtest.so.0.0.0</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x4E5F2A6</ip>
      <obj>/usr/lib64/libgtest.so.0.0.0</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x487641</ip>
      <obj>/home/adad3720/asn1/testGame</obj>
      <fn>main</fn>
      <dir>/home/adad3720/asn1/test</dir>
      <file>TestAll.cpp</file>
      <line>20</line>
    </frame>
  </stack>
</error>

<error>
  <unique>0x1</unique>
  <tid>1</tid>
  <kind>UninitCondition</kind>
  <what>Conditional jump or move depends on uninitialised value(s)</what>
  <stack>
    <frame>
      <ip>0x48EBD4</ip>
      <obj>/home/adad3720/asn1/testGame</obj>
      <fn>GoFishController::initPlayers()</fn>
      <dir>/home/adad3720/asn1/src</dir>
      <file>GoFishController.cpp</file>
      <line>62</line>
    </frame>
    <frame>
      <ip>0x48FBE8</ip>
      <obj>/home/adad3720/asn1/testGame</obj>
      <fn>GoFishController::update()</fn>
      <dir>/home/adad3720/asn1/src</dir>
      <file>GoFishController.cpp</file>
      <line>146</line>
    </frame>
    <frame>
      <ip>0x41A892</ip>
      <obj>/home/adad3720/asn1/testGame</obj>
      <fn>GoFishControllerTest_updateStart_Test::TestBody()</fn>
      <dir>/home/adad3720/asn1/test</dir>
      <file>GoFishControllerTest.cpp</file>
      <line>197</line>
    </frame>
    <frame>
      <ip>0x4E657A2</ip>
      <obj>/usr/lib64/libgtest.so.0.0.0</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x4E5BB26</ip>
      <obj>/usr/lib64/libgtest.so.0.0.0</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x4E5BBCD</ip>
      <obj>/usr/lib64/libgtest.so.0.0.0</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x4E5BCD4</ip>
      <obj>/usr/lib64/libgtest.so.0.0.0</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x4E5F017</ip>
      <obj>/usr/lib64/libgtest.so.0.0.0</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x4E5F2A6</ip>
      <obj>/usr/lib64/libgtest.so.0.0.0</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x487641</ip>
      <obj>/home/adad3720/asn1/testGame</obj>
      <fn>main</fn>
      <dir>/home/adad3720/asn1/test</dir>
      <file>TestAll.cpp</file>
      <line>20</line>
    </frame>
  </stack>
</error>

<error>
  <unique>0x2</unique>
  <tid>1</tid>
  <kind>UninitCondition</kind>
  <what>Conditional jump or move depends on uninitialised value(s)</what>
  <stack>
    <frame>
      <ip>0x48EBEE</ip>
      <obj>/home/adad3720/asn1/testGame</obj>
      <fn>GoFishController::initPlayers()</fn>
      <dir>/home/adad3720/asn1/src</dir>
      <file>GoFishController.cpp</file>
      <line>62</line>
    </frame>
    <frame>
      <ip>0x48FBE8</ip>
      <obj>/home/adad3720/asn1/testGame</obj>
      <fn>GoFishController::update()</fn>
      <dir>/home/adad3720/asn1/src</dir>
      <file>GoFishController.cpp</file>
      <line>146</line>
    </frame>
    <frame>
      <ip>0x41A892</ip>
      <obj>/home/adad3720/asn1/testGame</obj>
      <fn>GoFishControllerTest_updateStart_Test::TestBody()</fn>
      <dir>/home/adad3720/asn1/test</dir>
      <file>GoFishControllerTest.cpp</file>
      <line>197</line>
    </frame>
    <frame>
      <ip>0x4E657A2</ip>
      <obj>/usr/lib64/libgtest.so.0.0.0</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x4E5BB26</ip>
      <obj>/usr/lib64/libgtest.so.0.0.0</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x4E5BBCD</ip>
      <obj>/usr/lib64/libgtest.so.0.0.0</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x4E5BCD4</ip>
      <obj>/usr/lib64/libgtest.so.0.0.0</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x4E5F017</ip>
      <obj>/usr/lib64/libgtest.so.0.0.0</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x4E5F2A6</ip>
      <obj>/usr/lib64/libgtest.so.0.0.0</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x487641</ip>
      <obj>/home/adad3720/asn1/testGame</obj>
      <fn>main</fn>
      <dir>/home/adad3720/asn1/test</dir>
      <file>TestAll.cpp</file>
      <line>20</line>
    </frame>
  </stack>
</error>

<error>
  <unique>0x3</unique>
  <tid>1</tid>
  <kind>UninitCondition</kind>
  <what>Conditional jump or move depends on uninitialised value(s)</what>
  <stack>
    <frame>
      <ip>0x48ED17</ip>
      <obj>/home/adad3720/asn1/testGame</obj>
      <fn>GoFishController::initPlayers()</fn>
      <dir>/home/adad3720/asn1/src</dir>
      <file>GoFishController.cpp</file>
      <line>69</line>
    </frame>
    <frame>
      <ip>0x48FBE8</ip>
      <obj>/home/adad3720/asn1/testGame</obj>
      <fn>GoFishController::update()</fn>
      <dir>/home/adad3720/asn1/src</dir>
      <file>GoFishController.cpp</file>
      <line>146</line>
    </frame>
    <frame>
      <ip>0x41A892</ip>
      <obj>/home/adad3720/asn1/testGame</obj>
      <fn>GoFishControllerTest_updateStart_Test::TestBody()</fn>
      <dir>/home/adad3720/asn1/test</dir>
      <file>GoFishControllerTest.cpp</file>
      <line>197</line>
    </frame>
    <frame>
      <ip>0x4E657A2</ip>
      <obj>/usr/lib64/libgtest.so.0.0.0</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x4E5BB26</ip>
      <obj>/usr/lib64/libgtest.so.0.0.0</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x4E5BBCD</ip>
      <obj>/usr/lib64/libgtest.so.0.0.0</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x4E5BCD4</ip>
      <obj>/usr/lib64/libgtest.so.0.0.0</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x4E5F017</ip>
      <obj>/usr/lib64/libgtest.so.0.0.0</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x4E5F2A6</ip>
      <obj>/usr/lib64/libgtest.so.0.0.0</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x487641</ip>
      <obj>/home/adad3720/asn1/testGame</obj>
      <fn>main</fn>
      <dir>/home/adad3720/asn1/test</dir>
      <file>TestAll.cpp</file>
      <line>20</line>
    </frame>
  </stack>
</error>

<error>
  <unique>0x4</unique>
  <tid>1</tid>
  <kind>UninitCondition</kind>
  <what>Conditional jump or move depends on uninitialised value(s)</what>
  <stack>
    <frame>
      <ip>0x48ED31</ip>
      <obj>/home/adad3720/asn1/testGame</obj>
      <fn>GoFishController::initPlayers()</fn>
      <dir>/home/adad3720/asn1/src</dir>
      <file>GoFishController.cpp</file>
      <line>69</line>
    </frame>
    <frame>
      <ip>0x48FBE8</ip>
      <obj>/home/adad3720/asn1/testGame</obj>
      <fn>GoFishController::update()</fn>
      <dir>/home/adad3720/asn1/src</dir>
      <file>GoFishController.cpp</file>
      <line>146</line>
    </frame>
    <frame>
      <ip>0x41A892</ip>
      <obj>/home/adad3720/asn1/testGame</obj>
      <fn>GoFishControllerTest_updateStart_Test::TestBody()</fn>
      <dir>/home/adad3720/asn1/test</dir>
      <file>GoFishControllerTest.cpp</file>
      <line>197</line>
    </frame>
    <frame>
      <ip>0x4E657A2</ip>
      <obj>/usr/lib64/libgtest.so.0.0.0</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x4E5BB26</ip>
      <obj>/usr/lib64/libgtest.so.0.0.0</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x4E5BBCD</ip>
      <obj>/usr/lib64/libgtest.so.0.0.0</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x4E5BCD4</ip>
      <obj>/usr/lib64/libgtest.so.0.0.0</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x4E5F017</ip>
      <obj>/usr/lib64/libgtest.so.0.0.0</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x4E5F2A6</ip>
      <obj>/usr/lib64/libgtest.so.0.0.0</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x487641</ip>
      <obj>/home/adad3720/asn1/testGame</obj>
      <fn>main</fn>
      <dir>/home/adad3720/asn1/test</dir>
      <file>TestAll.cpp</file>
      <line>20</line>
    </frame>
  </stack>
</error>


<status>
  <state>FINISHED</state>
  <time>00:00:00:05.262 </time>
</status>

<errorcounts>
  <pair>
    <count>1</count>
    <unique>0x4</unique>
  </pair>
  <pair>
    <count>1</count>
    <unique>0x3</unique>
  </pair>
  <pair>
    <count>1</count>
    <unique>0x2</unique>
  </pair>
  <pair>
    <count>1</count>
    <unique>0x1</unique>
  </pair>
  <pair>
    <count>1</count>
    <unique>0x0</unique>
  </pair>
</errorcounts>

<suppcounts>
</suppcounts>

</valgrindoutput>

